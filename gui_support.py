#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.17
# In conjunction with Tcl version 8.6
#    Dec 21, 2018 04:06:06 PM CET  platform: Windows NT
#    Dec 21, 2018 05:55:25 PM CET  platform: Windows NT
#    Dec 21, 2018 07:15:13 PM CET  platform: Windows NT

import sys
import main

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def set_Tk_var():
    global file_list
    file_list = StringVar()
    global model 
    model = main.Main()
    global mirror_var, inject_var
    mirror_var = StringVar()


def all_inject_off():
    for file in model.file_list:
        file[1][1] = False
    update_list_box()

def all_inject_on():
    for file in model.file_list:
        file[1][1] = True
    update_list_box()

def all_mirror_off():
    for file in model.file_list:
        file[1][0] = False
    update_list_box()

def all_mirror_on():
    for file in model.file_list:
        file[1][0] = True
    update_list_box()

def inject_off():
    for sel in model.file_selected:
        model.file_list[sel][1][1] = False
    update_list_box()

def inject_on():
    for sel in model.file_selected:
        model.file_list[sel][1][1] = True
    update_list_box()

def mirror_off():
    for sel in model.file_selected:
        model.file_list[sel][1][0] = False
    update_list_box()

def mirror_on():
    for sel in model.file_selected:
        model.file_list[sel][1][0] = True
    update_list_box()

def start_processing():
    model.process()

def update_list_box():
    w.file_list_box.delete(0, END)
    index = 0
    for file in model.file_list:
        name = file[0].split('/')[-1]
        mirror = file[1][0]
        inject = file[1][1]
        w.file_list_box.insert(END,str(index) + " " + name +"   Mirror:"+ str(mirror) + " Inject:" + str(inject))
        index = index + 1

def select_files():
    file_list = model.select_files()
    if file_list == []:
        return
    update_list_box()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None
    exit()

def update_from_selection(now):
    model.file_selected = now

if __name__ == '__main__':
    import gui
    gui.vp_start_gui()